
import { useState } from "react";
import { useQueryClient } from "@tanstack/react-query";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { format } from "date-fns";
import { 
  DisplayInvoice, 
  InvoiceItem, 
  InvoiceStatus, 
  PaymentMethod,
  prepareForSupabase
} from "@/lib/types/invoice";

export const useInvoiceActions = () => {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  
  // Delete invoice
  const deleteInvoice = async (invoiceId: string) => {
    if (!invoiceId) return;
    
    try {
      // First, remove invoice_id from associated trips
      const { error: tripUpdateError } = await supabase
        .from("trips")
        .update({ invoice_id: null })
        .eq("invoice_id", invoiceId);
      
      if (tripUpdateError) {
        console.error("Error unlinking trips:", tripUpdateError);
      }
      
      // Then delete the invoice
      const { error } = await supabase
        .from("invoices")
        .delete()
        .eq("id", invoiceId);

      if (error) throw error;

      toast({
        title: "Invoice deleted",
        description: "Invoice has been deleted successfully",
      });

      queryClient.invalidateQueries({ queryKey: ["invoices"] });
      return true;
    } catch (error) {
      console.error("Error deleting invoice:", error);
      toast({
        title: "Error",
        description: "Failed to delete invoice",
        variant: "destructive",
      });
      return false;
    }
  };

  // Record payment
  const recordPayment = async (
    invoice: DisplayInvoice,
    paymentAmount: number,
    paymentMethod: PaymentMethod,
    paymentDate: string,
    paymentNotes: string
  ) => {
    if (!invoice) return false;
    
    try {
      const newPaidAmount = (invoice.paid_amount || 0) + paymentAmount;
      const newStatus: InvoiceStatus = 
        newPaidAmount >= invoice.total_amount ? "paid" : "sent";
      
      const { error } = await supabase
        .from("invoices")
        .update({
          paid_amount: newPaidAmount,
          payment_date: paymentDate,
          payment_method: paymentMethod,
          status: newStatus,
          notes: invoice.notes 
            ? `${invoice.notes}\n\nPayment (${format(new Date(paymentDate), "MMM d, yyyy")}): ${paymentNotes}`
            : `Payment (${format(new Date(paymentDate), "MMM d, yyyy")}): ${paymentNotes}`,
        })
        .eq("id", invoice.id);
      
      if (error) throw error;

      toast({
        title: "Payment recorded",
        description: newStatus === "paid" 
          ? "Invoice has been marked as fully paid" 
          : "Partial payment has been recorded",
      });
      
      queryClient.invalidateQueries({ queryKey: ["invoices"] });
      return true;
    } catch (error) {
      console.error("Error recording payment:", error);
      toast({
        title: "Error",
        description: "Failed to record payment",
        variant: "destructive",
      });
      return false;
    }
  };

  // Save invoice (create or update)
  const saveInvoice = async (
    formData: FormData, 
    invoiceItems: InvoiceItem[], 
    editInvoice: DisplayInvoice | null, 
    selectedTrips: string[]
  ) => {
    const totalAmount = invoiceItems.reduce((sum, item) => sum + (item.amount || 0), 0);
    
    try {
      if (editInvoice) {
        // Update existing invoice
        const supabaseInvoice = prepareForSupabase({
          client_id: formData.get("client_id") as string,
          date: formData.get("date") as string,
          due_date: formData.get("due_date") as string,
          status: formData.get("status") as InvoiceStatus,
          items: invoiceItems,
          total_amount: totalAmount,
          paid_amount: editInvoice.paid_amount,
          notes: formData.get("notes") as string || null,
          id: editInvoice.id,
          created_at: editInvoice.created_at,
          updated_at: new Date().toISOString(),
        });
        
        const { error } = await supabase
          .from("invoices")
          .update(supabaseInvoice)
          .eq("id", editInvoice.id);
        
        if (error) throw error;

        toast({
          title: "Invoice updated",
          description: "Invoice details have been updated successfully",
        });
        
        return { success: true, action: "update" as const };
      } else {
        // Create new invoice
        const supabaseInvoice = prepareForSupabase({
          id: '', // Will be auto-generated by Supabase
          client_id: formData.get("client_id") as string,
          date: formData.get("date") as string,
          due_date: formData.get("due_date") as string,
          status: formData.get("status") as InvoiceStatus || "draft",
          items: invoiceItems,
          total_amount: totalAmount,
          paid_amount: 0,
          notes: formData.get("notes") as string || null,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        });
        
        const { data, error } = await supabase
          .from("invoices")
          .insert(supabaseInvoice)
          .select();
        
        if (error) throw error;

        // If trips were selected, update them with the invoice_id
        if (selectedTrips.length > 0 && data && data[0]) {
          const invoiceId = data[0].id;
          
          const { error: updateError } = await supabase
            .from("trips")
            .update({ invoice_id: invoiceId })
            .in("id", selectedTrips);
          
          if (updateError) {
            console.error("Error updating trips with invoice ID:", updateError);
            toast({
              title: "Warning",
              description: "Invoice created but failed to link some trips",
              variant: "destructive",
            });
          }
        }

        toast({
          title: "Invoice created",
          description: "New invoice has been created successfully",
        });
        
        return { success: true, action: "create" as const };
      }
    } catch (error) {
      console.error("Error saving invoice:", error);
      toast({
        title: "Error",
        description: "Failed to save invoice details",
        variant: "destructive",
      });
      return { success: false, action: null };
    } finally {
      queryClient.invalidateQueries({ queryKey: ["invoices"] });
      queryClient.invalidateQueries({ queryKey: ["availableTrips"] });
    }
  };
  
  // Generate PDF and send email (placeholders)
  const generateInvoicePDF = (invoice: DisplayInvoice) => {
    toast({
      title: "PDF Generation",
      description: "PDF generation would happen here in a real app",
    });
    console.log("Generating PDF for invoice:", invoice);
  };

  const sendInvoiceByEmail = (invoice: DisplayInvoice) => {
    toast({
      title: "Email Sending",
      description: "Email sending would happen here in a real app",
    });
    console.log("Sending invoice by email:", invoice);
  };
  
  return {
    deleteInvoice,
    recordPayment,
    saveInvoice,
    generateInvoicePDF,
    sendInvoiceByEmail
  };
};
